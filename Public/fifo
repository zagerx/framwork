# 1 "./Public/fifo.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./Public/fifo.c"







# 1 "./Public/fifo.h" 1



typedef unsigned char byte_t;
typedef struct byte_fifo{
    unsigned short head;
    unsigned short tail;
    volatile short remain_byte;
    byte_t *pbuf;
    volatile unsigned short buflen;
}byte_fifo_t;
void bytefifo_init(byte_fifo_t *pfifo,byte_t *arry,unsigned short len);
char bytefifo_writemulitebyge(byte_fifo_t *pfifo,byte_t *buf,unsigned short len);
char bytefifo_readmulintebyte(byte_fifo_t *pfifo,byte_t *buf,unsigned short len);





# 1 "./Public/plooc.h" 1



typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
# 21 "./Public/fifo.h" 2
typedef struct byte_queue_t byte_queue_t;

struct __byte_queue_t { uint8_t *pchBuffer; uint16_t hwSize; uint16_t hwHead; uint16_t hwTail; uint16_t hwCount; }; struct byte_queue_t { uint8_t chMask[sizeof(struct __byte_queue_t)] __attribute__((aligned( __alignof__(struct __byte_queue_t) ))); };








# 9 "./Public/fifo.c" 2

static char bytefifo_isfull(byte_fifo_t *pfifo)
{
 if((pfifo->head+1)%pfifo->buflen == pfifo->tail)
 {
  return 0;
 }
 return 1;
}

static char bytefifo_isempty(byte_fifo_t *pfifo)
{
 if(pfifo->head == pfifo->tail)
 {
  return 0;
 }
 return 1;
}

static char bytefifo_writebyte(byte_fifo_t *pfifo,byte_t data)
{
    if(bytefifo_isfull(pfifo) == 0)
    {
        return 1;
    }
    pfifo->pbuf[pfifo->head] = data;
    pfifo->head = (pfifo->head + 1) % pfifo->buflen ;
 pfifo->remain_byte--;
    return 0;
}
static char bytefifo_readbyte(byte_fifo_t *pfifo,byte_t *pdata)
{
    if (bytefifo_isempty(pfifo) == 0)
    {
        return 1;
    }
 *pdata = pfifo->pbuf[pfifo->tail];
    pfifo->tail = (pfifo->tail + 1)%pfifo->buflen ;
 pfifo->remain_byte++;
 return 0;
}


static unsigned short bytefifo_usendbyte(byte_fifo_t *pfifo)
{
 if(pfifo->tail <= pfifo->head)
 {
  return (pfifo->head-pfifo->tail);
 }else{
  return (pfifo->buflen + pfifo->head - pfifo->tail);
 }
}
void bytefifo_init(byte_fifo_t *pfifo,byte_t *arry,unsigned short len)
{
    pfifo->head = 0;
    pfifo->tail = 0;
    pfifo->remain_byte = len;
    pfifo->pbuf = arry;
    pfifo->buflen = len;
}
char bytefifo_writemulitebyge(byte_fifo_t *pfifo,byte_t *buf,unsigned short len)
{
 byte_t *pw;
 pw = buf;
 if(len > (pfifo->buflen - bytefifo_usendbyte(pfifo)-1))
 {
  return 1;
 }
 while(len--)
 {
  bytefifo_writebyte(pfifo,*pw);
  pw++;
 }
 return 0;
}
char bytefifo_readmulintebyte(byte_fifo_t *pfifo,byte_t *buf,unsigned short len)
{
 byte_t temp = 0;
 char statues = 1;
 if(len > bytefifo_usendbyte(pfifo))
 {
  return 1;
 }
 while(len--)
 {
  statues = bytefifo_readbyte(pfifo,&temp);
  *buf++ = temp;
 }
 return statues;
}




# 1 "./Public/./fifo.h" 1
# 104 "./Public/fifo.c" 2





byte_queue_t fifo_cb;

char byte_queue_enqueue(byte_queue_t *ptObj, uint8_t chByte)
{

    struct __byte_queue_t * ptThis = (struct __byte_queue_t *)(ptObj);
    if ( ((*ptThis).hwHead == (*ptThis).hwTail)
        && (0 != (*ptThis).hwCount)) {

        return 0;
    }
}
